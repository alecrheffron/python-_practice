
class Data:
    def __init__(self):
        self.nums = [1, 2, 3, 4, 5]

    def change_data(self, index, n):
        self.nums[index] = n

# Two different ways to mutate date
"""
data_one = Data()
data_one.nums[1] = 100
print(data_one.nums)

data_two = Data()
data_two.change_data(0, 100)
print(data_two.nums)
"""

# Demonstration of Inheritance, the Shape class is passed to the Square class

class Shape():
    def __init__(self, w, l):
        self.width = w
        self.len = l

    def print_size(self):
        print("""{} by {}
              """.format(self.width,
                         self.len))

# Nothing defined in child class will affect parent class

class Square(Shape):
    def area(self):
             return self.width * self.len

# You can overide the parent class method by renaming

    def print_size(self):
        print("""I am {} by {}
              """.format(self.width,
                         self.len))
a_square = Square(20, 20)
a_square.print_size()
print(a_square.area())

# Composition - storing object as a viriable inside another object

class Dog():
    def __init__(self,
                  name,
                  breed,
        owner):
        self.name = name
        self.breed = breed
        self.owner = owner

class Person():
    def __init__(self, name):
        self.name = name

mick = Person("Mick Jagger")
stan = Dog("Stanley",
           "Bulldog",
           mick)
print(stan.owner.name)